*tpDev.txt* Adds functionality for the Fanuc TP language


		  __        ________               ~
		_/  |_______\______ \   _______  __ ~
		\   __\____ \|    |  \_/ __ \  \/ /~
		 |  | |  |_> >    `   \  ___/\   /~
		 |__| |   __/_______  /\___  >\_/  ~
		      |__|          \/     \/      ~

==============================================================================
CONTENTS							*tpDev-contents*

    1.Intro & Features........................|tpDevIntro|
    2.Dependencies............................|tpDevDependencies|
    3.Mapping.................................|tpDevMapping|
    4.Options.................................|tpDevOptions|
    5.Vimrc...................................|tpDevVimrc|
    6.Changelog...............................|tpDevChangelog|
    7.Credits.................................|tpDevCredits|
    8.License.................................|tpDevLicense|

==============================================================================
1. INTRO							*tpDevIntro* ~
------------------------------------------------------------------------------
1.1 Introduction:

  TpDev creates a development environment for programming Fanuc robots
using the TP (teach pendant) language. This includes syntax highlighting,
code snippets, tags, data variables, debugging, compiling, and viewing 
the program call structure. Some features are dependent on 3rd party plugins 
or software. Some features use the Windows command line. No current 
intentions to adapt to other OS, but open to forks. 
------------------------------------------------------------------------------
1.2 Features:

	Syntax		Adds highlighting for the TP syntax. Detects files of type *.ls
			TP syntax is in all caps, so it is useful to automatically capitallize
			when in insert mode, see the example vimrc setup |tpDevVimrc|

	Snippets	Code snippets customized for TP language using the SnipMate plugin.
			Shortcut characters are entered (all caps) then press <tab>
			to expand into the snippet. Continue pressing <tab> to advance through
			placeholders in the snippet. Snippets can be modified or added to in the
			snippets file located at: tpDev-master\snippets\tp.snippets.

	Tags		All programs in the same folder are automatically made into tags.
			That means you can jump to that file by <c-leftmouse> or CTRL-] 
			when the cursor is on that program name. Useful for jumping to called programs.
			See :h `tag-commands` for more detail on using tags.

	Data Variables	Allows the user to type out data or IO with the comment or number only,
			and will automatically fill in the missing part.
			Any data that is like "TYPE[#:Comment]" can be used. 
			"TYPE[Comment]" or "TYPE[#]" will automatically be replaced by "TYPE[#:Comment]".
			For example: enter "RO[GripperClose]=ON" or "RO[1]=ON" and it is replaced with
			"RO[1:GripperClose]=ON". The function runs when a TP file is saved.
			This eliminates needing to remember which numbers you assigned to each I/O or Register.
			Comments will be automatically updated if changed.

			You must create a data.csv definition file in the following format:
			
			data.csv:  >

				RO,1,GripperClose
				DI,5,PartPresent
				R,10,Counter
				PR,5,PickPos
<
			
			The data.csv file must be in the same folder as your program and the name must
			be of the format data*.csv, so data_project1.csv will work. The comment must 
			contain only alphanumeric characters and no spaces. If you have AutoComplPop
			then it will autocomplete your variable names.

	Debugging	Notifies user of missing program headers. Automatically fixes missing colons and semicolons.
			More development to come on this.

	Copy/Paste	Copy records the current file path. (See |tpDevMapping| for keystrokes)
			Paste uses windows command line to paste the file to the current directory.
			You will be prompted to type a new name or keep the original. If the file type
			is *.ls, it will automatically rename the program name header as well. The
			file type extension does not need to be typed, unless you want to change it. 
			
	Compiling	Runs the Fanuc MakeTP utility to compile the current *.ls file to a *.tp file.
			The compiled file is placed in the \bin folder which
			can be specified with the tpDev location variable |tpDevOptions|. 
			If the AsyncRun plugin is installed it will be run in the background and allow you
			to continue working. The quickfix window will open when it is complete and notify of any
			compile errors. MakeTP is a Fanuc utility that is included with the purchase
			of RoboGuide or OLPCPro. To use MakeTP you must first create a virtual robot
			that has the options you need, and then run Setrobot from comand prompt and
			select the virtual robot. This will create a robot.ini file that should be in
			your project directory. LS files can also be compiled by opening them in
			RoboGuide, OLPCPro, or loading them on an actual robot that has the Ascii
			upload option installed. 

	TpTree		TpTree is an alternative to NerdTree that is tailored
			specifically for TP programming. When run, it searches for a file named
			"a_main*.ls", which can be changed with a tpDev behavior variable |tpDevOptions|.
			If the "a_main" program is not found, then it assumes the current file is the main program.
			It then proceeds to search through for "Call" and "Run" commands to determine the
			program structure. It will search 2 layers deep and create a tree view on the
			left side of Vim. You can continue to expand down the call stack and open
			programs similar to NerdTree.
==============================================================================
2. DEPENDENCIES						*tpDevDependencies* ~
------------------------------------------------------------------------------
2.1 Dependencies (some have option to disable):

	Windows		Command line is used for: Tag generation, Copy/Paste
			Programs, TpTree Generation, Compiling programs

	NERDTree	https://github.com/scrooloose/nerdtree
			Enabled by default, to disable:
			set g:tpDevUseNERDTree = 0

	AsyncRun	https://github.com/skywind3000/asyncrun.vim
			Enabled by default, to disable:
			set g:tpDevUseAsyncRun = 0

	SnipMate	https://github.com/garbas/vim-snipmate
			Required to use built in code snippets
			Is automatically disabled if SnipMate is not installed
			Code snippets located in tpDev\snippets\tp.snippets
			
	MakeTP		http://robot.fanucamerica.com/
			Command line utility required to compile tp programs. 
			Must be acquired from Fanuc by purchasing RoboGuide or OLPCPro.
------------------------------------------------------------------------------
2.2 Plugin recommendations:

	AutoComplPop	https://github.com/vim-scripts/AutoComplPop
			Very useful for autocompleting of words and code snippets


==============================================================================
3. MAPPING							*tpDevMapping* ~
------------------------------------------------------------------------------
3.1 Any filetype Mapping:
	Variable			Default Mapping		Description
	---------			---------------		------------
	g:tpDevCopyProgram		<space>c		copy current file to clipboard
	g:tpDevPasteProgram		<space>p		paste clipboard to current directory
	g:tpDevTpTreeToggle		<F5>			Toggle between NERDTree & TpTree
------------------------------------------------------------------------------
3.2 TP filetype Mapping:
	Variable			Default Mapping		Description
	---------			---------------		------------
	g:tpDevTppDebug			<space>tp		debug current file
	g:tpDevRemark			<space>r		remark current line
	g:tpDevLsClean			<space>ls		remove generated line numbers
	g:tpDevCompileTp		<F3>			compile current file
------------------------------------------------------------------------------
3.3 TpTree filetype Mapping:
	Variable			Default Mapping		Description
	---------			---------------		------------
	g:tpDevTpTreeRefresh		r			refresh TpTree
	g:tpDevTpTreeExpand		e			expand node 1 level down
	g:tpDevTpTreeOpenNode		<cr>			open node file in right window
	g:tpDevTpTreeMouseOpenNode	<2-leftmouse>		open node file in right window
	g:tpDevTpTreeOpenFold		o			open fold
	g:tpDevTpTreeOpenAllFolds 	O			open all folds 
	g:tpDevTpTreeCloseFold		c			close fold
	g:tpDevTpTreeCloseAllFolds	C			close all folds

==============================================================================
4. OPTIONS							*tpDevOptions* ~
------------------------------------------------------------------------------
4.1 Location Variables:
	Variable			Default Mapping		Description
	---------			---------------		------------
	g:tpDevDirMain			$vim			Main project directory
	g:tpDevDirSrc			$vim			Source code directory
	g:tpDevDirBin			$vim			Compiled binary directory
------------------------------------------------------------------------------
4.2 Behavior Variables:
	Variable			Default 		Description
	---------			---------------		------------
	g:tpDevMainProg			"a_main"		regex match for main program search
	g:tpDevDataFile			"data"			regex match for data file search
	g:tpDevTpTreeWidth		30			Column width for TpTree
	g:tpDevUseNERDTree		1			set to 0 to disable NerdTree depenecy
	g:tpDevUseAsyncRun		1			set to 0 to disable AsyncRun depenecy

==============================================================================
5. VIMRC							*tpDevVimrc* ~

	Example setup:
	---------------- >
	set hidden
	set autochdir	

	"TpDev Settings
	let g:tpDevDirMain = 'C:\Users\name\Projects'
	let g:tpDevDirSrc = 'C:\Users\name\Projects\source'
	let g:tpDevDirBin = 'C:\Users\name\Projects\binary'
	
	"NERDTree settings
	let NERDTreeIgnore=['tags$', '\~$', '/*.TpTree']
	
	"SnipMate settings
 	 "Shows available snippets
	imap '<tab> <c-r><tab>
 	 "insert real tab
	imap <c-tab> <c-q><tab>

	"Map tag jumping
	nmap <cr> <c-]>
	nmap <c-cr> <c-T>

	"VIM internal caps lock <c-^>
	"TP files default to all caps by default
	for c in range(char2nr('A'), char2nr('Z'))
	  execute 'lnoremap ' . nr2char(c+32) . ' ' . nr2char(c)
 	 execute 'lnoremap ' . nr2char(c) . ' ' . nr2char(c+32)
	endfor
	set iminsert=0 " Caps lock normally off
	au FileType tp setlocal iminsert=1
	au FileType vim setlocal iminsert=0
	imap .cl <C-^>
	nmap .cl V~
<

==============================================================================
6. CHANGELOG							*tpDevChangelog* ~

Author: Ben Coady
Created: 4/19/2017

	1.2.0	Fixed incompatiblity with TpTree and ReplaceData
		ReplaceData only updates on a file write
		Added set hidden and autochdir forced setting	

	1.1.1	Updated DataReplace to fill in numbers or Comments and
		will support elemental PR's

	1.1.0	Added DataReplace function for handling data variables
		Added feature descriptions to help document

	1.0.1	Set main program to current TP program if no match
		Fix snippet dictionary for AutoComplPop
		Remove directory filter

	1.0.0	Initial Stable release
==============================================================================
7. CREDITS							*tpDevCredits* ~

	Jay Strybis - TP Syntax file
==============================================================================
8. LICENSE							*tpDevLicense* ~

	TpDev is released under the MIT license.
	See https://opensource.org/licenses/MIT
